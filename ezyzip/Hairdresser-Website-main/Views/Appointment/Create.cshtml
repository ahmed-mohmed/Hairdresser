@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model Hairdresser_Website.Models.Appointment

@if (TempData["Error"] != null)
{
        <div class="alert alert-danger">
        @TempData["Error"]
        </div>
}

<div class="container mt-4">
    <h2 class="mb-4">Book an Appointment</h2>

    <form asp-controller="Appointment" asp-action="Create" method="post">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="Service.Salon.SalonId" class="form-label">Salon</label>
                <select asp-for="Service.Salon.SalonId" class="form-select" asp-items="ViewBag.Salons" id="salonId">
                    <option value="">-- Select Salon --</option>
                </select>
                <span asp-validation-for="Service.Salon.SalonId" class="text-danger"></span>
            </div>

            <div class="col-md-6 mb-3">
                <label asp-for="ServiceId" class="form-label">Service</label>
                <select asp-for="ServiceId" class="form-select" id="serviceId">
                    <option value="">-- Select Service --</option>
                </select>
                <span asp-validation-for="ServiceId" class="text-danger"></span>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="EmployeeId" class="form-label">Employee</label>
                <select asp-for="EmployeeId" class="form-select" id="employeeId">
                    <option value="">-- Select Employee --</option>
                </select>
                <span asp-validation-for="EmployeeId" class="text-danger"></span>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Price</label>
                    <div class="form-control-plaintext" id="servicePrice">--</div>
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Duration</label>
                    <div class="form-control-plaintext" id="serviceDuration">--</div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="AppointmentDate" class="form-label">Date</label>
                <input asp-for="AppointmentDate" type="date" class="form-control" id="appointmentDate" />
                <span asp-validation-for="AppointmentDate" class="text-danger"></span>
            </div>

            <div class="col-md-6 mb-3">
                <label for="appointmentTime" class="form-label">Time</label>
                <select id="appointmentTime" name="appointmentTime" class="form-select" disabled>
                    <option value="">-- Select Date First --</option>
                </select>

            </div>
        </div>

        <!-- Hidden input for the complete datetime -->
        <input asp-for="AppointmentDate" type="hidden" id="completeAppointmentDateTime" />

        <div class="row mt-4">
            <div class="col">
                <button type="submit" class="btn btn-primary">Book Appointment</button>
                <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    </form>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get references to all form elements
            const salonSelect = document.getElementById('salonId');
            const serviceSelect = document.getElementById('serviceId');
            const employeeSelect = document.getElementById('employeeId');
            const servicePriceElement = document.getElementById('servicePrice');
            const serviceDurationElement = document.getElementById('serviceDuration');
            const dateInput = document.getElementById('appointmentDate');
            const timeSelect = document.getElementById('appointmentTime');
            const completeDateTimeInput = document.getElementById('completeAppointmentDateTime');

            // Store services data
            let servicesData = [];

            // Helper function to format price
            function formatPrice(price) {
                return new Intl.NumberFormat('tr-TR', {
                    style: 'currency',
                    currency: 'TRY'
                }).format(price);
            }

            // Helper function to format duration
            function formatDuration(minutes) {
                if (minutes < 60) {
                    return `${minutes} minutes`;
                }
                const hours = Math.floor(minutes / 60);
                const remainingMinutes = minutes % 60;
                if (remainingMinutes === 0) {
                    return `${hours} hour${hours > 1 ? 's' : ''}`;
                }
                return `${hours} hour${hours > 1 ? 's' : ''} ${remainingMinutes} minutes`;
            }

            // Helper function to clear and set default option
            function setDefaultOption(selectElement, text = '-- Select --') {
                selectElement.innerHTML = '';
                const defaultOption = document.createElement('option');
                defaultOption.text = text;
                defaultOption.value = '';
                selectElement.add(defaultOption);
            }

            // Function to update available time slots
            async function updateTimeSlots() {
                const employeeId = employeeSelect.value;
                const serviceId = serviceSelect.value;
                const date = dateInput.value;

                if (!employeeId || !serviceId || !date) {
                    timeSelect.disabled = true;
                    setDefaultOption(timeSelect, '-- Select all fields above --');
                    return;
                }

                timeSelect.disabled = true;
                timeSelect.innerHTML = '<option value="">Loading...</option>';

                try {
                    const response = await fetch(`/Appointment/GetAvailableTimeSlots?employeeId=${employeeId}&date=${date}&serviceId=${serviceId}`);
                    if (!response.ok) throw new Error('Failed to fetch time slots');
                    const timeSlots = await response.json();

                    setDefaultOption(timeSelect, '-- Select Time --');
                    timeSlots.forEach(slot => {
                        const option = document.createElement('option');
                        const timeString = new Date(`2000-01-01T${slot.time}`).toLocaleTimeString([], {
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        option.value = slot.time;
                        option.text = timeString;

                        if (!slot.isAvailable) {
                            option.disabled = true;
                            option.classList.add('text-muted', 'bg-light');
                        }

                        timeSelect.add(option);
                    });

                    timeSelect.disabled = false; // إزالة التعطيل بعد تحميل القيم
                } catch (error) {
                    console.error('Error fetching time slots:', error);
                    setDefaultOption(timeSelect, '-- Error loading time slots --');
                }
            }


            // When the salon selection changes
            salonSelect.addEventListener('change', async function () {
                const salonId = this.value;
                if (salonId) {
                    try {
                        const response = await fetch(`/Appointment/GetServicesBySalon?salonId=${salonId}`);
                        if (!response.ok) throw new Error('Failed to fetch services');
                        const data = await response.json();

                        servicesData = data; // Store the full services data
                        setDefaultOption(serviceSelect, '-- Select Service --');
                        data.forEach(service => {
                            const option = document.createElement('option');
                            option.text = `${service.name} (${formatPrice(service.price)} - ${formatDuration(service.duration)})`;
                            option.value = service.serviceId;
                            serviceSelect.add(option);
                        });
                        setDefaultOption(employeeSelect, '-- Select Employee --');
                        servicePriceElement.textContent = '--';
                        serviceDurationElement.textContent = '--';
                    } catch (error) {
                        console.error('Error fetching services:', error);
                        setDefaultOption(serviceSelect, '-- No Services Available --');
                    }
                } else {
                    setDefaultOption(serviceSelect, '-- Select Service --');
                    setDefaultOption(employeeSelect, '-- Select Employee --');
                    servicePriceElement.textContent = '--';
                    serviceDurationElement.textContent = '--';
                }
            });

            // When service is selected
            serviceSelect.addEventListener('change', async function () {
                const selectedService = servicesData.find(s => s.serviceId == this.value);
                if (selectedService) {
                    servicePriceElement.textContent = formatPrice(selectedService.price);
                    serviceDurationElement.textContent = formatDuration(selectedService.duration);
                } else {
                    servicePriceElement.textContent = '--';
                    serviceDurationElement.textContent = '--';
                }

                const salonId = salonSelect.value;
                if (this.value && salonId) {
                    try {
                        const response = await fetch(`/Appointment/GetEmployeesByServiceAndSalon?salonId=${salonId}&serviceId=${this.value}`);
                        if (!response.ok) throw new Error('Failed to fetch employees');
                        const data = await response.json();

                        setDefaultOption(employeeSelect, '-- Select Employee --');
                        data.forEach(employee => {
                            const option = document.createElement('option');
                            option.text = employee.name;
                            option.value = employee.employeeId;
                            employeeSelect.add(option);
                        });
                    } catch (error) {
                        console.error('Error fetching employees:', error);
                        setDefaultOption(employeeSelect, '-- No Employees Available --');
                    }
                } else {
                    setDefaultOption(employeeSelect, '-- Select Employee --');
                }

                setDefaultOption(timeSelect, '-- Select Employee and Date First --');
            });

            // Set min/max dates for date input
            if (dateInput) {
                const today = new Date();
                const maxDate = new Date();
                maxDate.setMonth(maxDate.getMonth() + 3);

                dateInput.min = today.toISOString().split('T')[0];
                dateInput.max = maxDate.toISOString().split('T')[0];
            }

            // Event listeners for time slot updates
            employeeSelect.addEventListener('change', updateTimeSlots);
            dateInput.addEventListener('change', updateTimeSlots);
        });
    </script>
}
